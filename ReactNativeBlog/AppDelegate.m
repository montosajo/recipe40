/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"
#import <OpenEars/OELanguageModelGenerator.h>
#import <OpenEars/OEAcousticModel.h>
#import <OpenEars/OEPocketsphinxController.h>
#import <OpenEars/OEEventsObserver.h>
#import "RCTRootView.h"
#import "RCTPushNotificationManager.h"
#import "dbm.h"
#import "Orientation.h" //
@implementation MyManager

@synthesize arr1;
@synthesize image;
@synthesize recipe;
@synthesize step;
@synthesize timer;
@synthesize someProperty;

+ (id)sharedManager {
  static MyManager *sharedMyManager = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    sharedMyManager = [[self alloc] init];
  });
  return sharedMyManager;
}

- (id)init {
  if (self = [super init]) {
    someProperty = @" Default Property Value";
     arr1=nil;
     step=nil;
     recipe=nil;
     step=nil;
    timer=nil;
  }
  return self;
}

- (void)dealloc {
  // Should never be called, but just here for clarity really.
}

@end
@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
 
  NSURL *jsCodeLocation;
 
  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */

 jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=false"];
  for (NSString* family in [UIFont familyNames])
  {
    NSLog(@"%@", family);
    for (NSString* name in [UIFont fontNamesForFamilyName: family])
    {
      NSLog(@" %@", name);
    }
  }
  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by the "Bundle React Native code and images" build step when
   * running the project on an actual device or running the project on the
   * simulator in the "Release" build configuration.
   */

 //jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"ReactNativeBlog"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  // load all db data
 
  //self.dbManager = [[DBManager alloc] initWithDatabaseFilename:@"sampledb.sql"];
  //[self loadData];
  
  return YES;
  
  
  
  
  

}
- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
  return [Orientation getOrientation];
}
-(void)loadData{
//  
//   MyManager *shManager =[MyManager sharedManager];
//  // Form the query.
//  NSString *query1 = @"select * from recipe";
//  
//  // Get the results.
//  if (self.arr1 != nil) {
//    self.arr1 = nil;
//  }
//  self.arr1= [[NSArray alloc] initWithArray:[self.dbManager loadDataFromDB:query1]];
//  shManager.recipe =_arr1;
//  query1 = @"select * from step";
//  
//  // Get the results.
//  if (self.arr1 != nil) {
//    self.arr1 = nil;
//  }
//  self.arr1 = [[NSArray alloc] initWithArray:[self.dbManager loadDataFromDB:query1]];
//  shManager.step=_arr1;
//  query1 = @"select * from imag";
//  
//  // Get the results.
//  if (self.arr1 != nil) {
//    self.arr1 = nil;
//  }
//  self.arr1 = [[NSArray alloc] initWithArray:[self.dbManager loadDataFromDB:query1]];
//  NSLog(@"Loaded ");
//  //
//  shManager.someProperty =@"flag";
//  shManager.image =_arr1;
//  query1 = @"select * from timer";
//  
//  // Get the results.
//  if (self.arr1 != nil) {
//    self.arr1 = nil;
//  }
//  self.arr1 = [[NSArray alloc] initWithArray:[self.dbManager loadDataFromDB:query1]];
//  NSLog(@"Loaded ");
//  //
//  shManager.someProperty =@"flag";
//  shManager.timer =_arr1;
//  /*UIImage *yourImage= [UIImage imageNamed:@"791.jpg"];
//  NSData *imageData = UIImagePNGRepresentation(yourImage);
//  NSString *postLength = [NSString stringWithFormat:@"%d", [imageData length]];
//  */
//  NSLog(@"base");
//  
}
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
  [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];
}
// Required for the register event.
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
  [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}
// Required for the notification event.
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)notification
{
  [RCTPushNotificationManager didReceiveRemoteNotification:notification];
}
// Required for the localNotification event.
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification
{
 [RCTPushNotificationManager didReceiveLocalNotification:notification];
  NSLog (@"Enigma processing ");
  UIApplicationState state = [application applicationState];
  if (state == UIApplicationStateActive)
  {
      if ([notification.alertBody rangeOfString:@"ZC"].location != NSNotFound || 1==1 )  {
      //just ignore it from Objc C POV will impact jsx only
    }
    else {
        //this is the visible end of timer action 
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Timer Ended " message:notification.alertBody
                                                   delegate:self cancelButtonTitle:@"OK"
                                          otherButtonTitles:nil];
        [alert show];
  
    }
  }
}


@end

